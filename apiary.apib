FORMAT: 1A

# Core MM API

Core MM is an API allowing consumers to access employee app features.



## Persons [/persons]

### Persons [/persons/{person_id}]

+ id (integer) - Id of the person
+ first name (string) - Name of the person
+ middle name (string) - Surname of the person
+ last name (string) - Surname of the person
+ photography (string) - Photography of the person in the form of a URL

+ Model (application/hal+json)

+ Parameters
    + person_id (required, number, `1`) ... ID of the person in the form of an integer
+ Attributes (object)
    + id: 1 (number, required)
    + first_name: John (string, required)
    + middle_name: Edward (string, required)
    + last_name: Doe (string, required)
    + photography: /images/1 (string)


### GET Person [GET]

A single Person is returned through a GET request where the person id is sent as an URL parameter.

+ Request (application/json)

    + Headers
    
            Accept-Charset: application/hal+json
            X-AUTH-TOKEN: DEBUGTOKEN
            X-FORWARDED-HOST: local-133.umantis.lan
            
+ Response 200 (application/hal+json)

    + Headers
    + Body
    + Attributes (Persons)



### GET Person Invitations [GET /persons/{person_id}/invitations]

Returns all peer invitations that this person has.

+ Request (application/json)

    + Headers
    
            Accept-Charset: application/hal+json
            X-AUTH-TOKEN: DEBUGTOKEN
            X-FORWARDED-HOST: local-133.umantis.lan

    
+ Response 200 (application/hal+json)

    + Headers
    + Body
    + Attributes (object)
        + _embedded
            + invitations (array[InvitationType])
        + page (Page)
        + _links
            + self
                + href: /persons/65/invitations (string)
            + next
                + href: /persons/65/invitations?page=1 (string)
    
    

## Employees [/employees]

### Employee [/employees/{employee_id}]

+ id (integer) - Id of the employee
+ name (string) - Name of the employee
+ surname (string) - Surname of the employee
+ title (string) - Title of the employee
+ photography (string) - Photography of the employee in the form of a URL

+ Model (application/hal+json)

+ Parameters
    + employee_id (required, number, `1`) ... ID of the employee in the form of an integer
+ Attributes (object)
    + id: 1 (number, required)
    + name: John (string, required)
    + surname: Doe (string, required)
    + title: Senior Software Engineer. (string)
    + photography: /images/1 (string)
    + _links 
        + self 
            + href:/employees/1, (string)
    + _embedded
        + positions (array[Position])



### GET Employee [GET]

A single Employee is returned through a GET request where the employee id is sent as an URL parameter.

+ Request (application/json)

    + Headers
    
            Accept-Charset: application/hal+json
            X-AUTH-TOKEN: DEBUGTOKEN
            X-FORWARDED-HOST: local-133.umantis.lan
            
+ Response 200 (application/hal+json)

    + Headers
    
    + Body
    + Attributes (Employee)



## Positions [/positions]

Every employee has at least a position.
A position identifes an occupancy into the company.


### Position [/positions/{position_id}]

Gets a position given it's id.

+ id (number) - Id of the position
+ name (string) - Name of the position
+ description (string) - Description of the position

+ Model (application/hal+json)

+ Parameters
    + position_id (required, number, `1`) ... ID of the position in the form of an integer
+ Attributes (object)
    + id: 1 (number, required)
    + name: Java developer (string, required)
    + description: Developer of the Core MM API (string)
    + _links
        + self 
            + href: /position/4 (string)
        + manager 
            + href: /position/1 (string)
        + employee 
            + href: /employees/1 (string)



### GET Position [GET]

A single Position is returned through a GET request where the position id is sent as an URL parameter.

+ Request (application/json)

    + Headers
    
            Accept-Charset: application/hal+json
            X-AUTH-TOKEN: DEBUGTOKEN
            X-FORWARDED-HOST: local-133.umantis.lan
            
+ Response 200 (application/hal+json)

    + Headers
    
    + Body
    + Attributes (Position)



### GET Position Direct Reports [GET /positions/{position_id}/direct_reports]

Returns list of position who direct reports given position id.

+ Request (application/json)

    + Headers
    
            Accept-Charset: application/hal+json
            X-AUTH-TOKEN: DEBUGTOKEN
            X-FORWARDED-HOST: local-133.umantis.lan
            
+ Response 200 (application/hal+json)

    + Headers
    
    + Body  
    + Attributes (object)
        + _embedded
            + direct_reports (array[Position])
        + page (Page)
        + _links
            + self 
                + href: /positions/1/direct_reports?page=0&limit=10 (string)
            + next
                + href: /positions/1/direct_reports?page=1&limit=10 (string)



    

## Goal [/goals/{goal_id}]

There are 7 different types of goals, when a goal type "Objective" is returned, additional links for parent goal and company goal will be returned.

+ period (integer) - Id of the period
+ type (integer) - Id of type of goal
+ title (string) - Title of the goal
+ description (string) - Description of the goal
+ creator (string) - Position id of the Goal creator
+ recipient (integer) - Position id of he Goal recipient
+ category (string) - Category of the created Goal
+ weight (number) - Weight of the goal

+ Model (application/hal+json)

+ Parameters
    + goal_id (required, number, `1`) ... ID of the goal in the form of an integer
+ Attributes (object)
    + title: Title for demo (string, required)
    + description: It seems that we can create goals. (string)
    + category: 1020001 (string)
    + weight: 3 (number)
    + _links
        + owner 
            + href: /positions/4
        + goal_type
            + href: /goals/types/2
        + period
            + href: /periods/3
        + parent
            + href: /goals/2 (required, string)
        + company_goal
            + href: /goals/3 (required, string)


### Get a goal [GET]

A single Goal is returned through a GET request where the goal id is sent as an URL parameter.

+ Request (application/json)

    + Headers
    
            Accept-Charset: application/hal+json
            X-AUTH-TOKEN: DEBUGTOKEN
            X-FORWARDED-HOST: local-133.umantis.lan
            
+ Response 200 (application/hal+json)

    + Headers
    
    + Body
    + Attributes (Goal)


### Modify a goal [PUT]

A  goal will be modified using this action.
This action takes a JSON payload as a part of the request.
Response then return specific header and body

+ Request (application/json)

    + Headers
    
            Accept-Charset: application/hal+json
            X-AUTH-TOKEN: DEBUGTOKEN
            X-FORWARDED-HOST: local-133.umantis.lan
            
    + Body
    + Attributes (Goal)

+ Response 200 (application/hal+json)

    + Headers
    
    + Body
    + Attributes (Goal)
    




### Delete a goal [DELETE /goals/{goal_id}?{period}&{recipient}&{type}]

This DELETE request will delete the goal with the existing request parameter id.

+ Request (application/json)
            
    + Headers
    
            Accept-Charset: application/hal+json
            X-AUTH-TOKEN: DEBUGTOKEN
            X-FORWARDED-HOST: local-133.umantis.lan
    
    + Parameters
        + period: 1 (required, number)
        + recipient: 1 (required, number)
        + type: 1 (required, number)
   
+ Response 204





### Create a new goal [POST /goals]

A new goal will be created using this action.
This action takes a JSON payload as a part of the request.
Response then return specific header and body

+ period (integer) - Id of the period
+ type (integer) - Id of type of goal
+ title (string) - Title of the goal
+ description (string) - Description of the goal
+ creator (string) - Position id of the Goal creator
+ recipient (integer) - Position id of he Goal recipient
+ category (string) - Category of the created Goal

+ Request (application/json)

    + Headers
    
            Accept-Charset: application/hal+json
            X-AUTH-TOKEN: DEBUGTOKEN
            X-FORWARDED-HOST: local-133.umantis.lan
    
    + Body
    + Attributes (Goal)

+ Response 201 (application/hal+json)
    + Attributes (Goal)



### Get all goals [GET /position/{position_id}/goals]

All Goals from given position are returned through a GET request where the position id is sent as an URL parameter.
Only goals for period set as CURRENT will be returned.

+ Parameters
    + position_id (required, number, `1`) ... ID of the position of the owner of the goals in the form of an integer
    
+ Request (application/json)

    + Headers
    
            Accept-Charset: application/hal+json
            X-AUTH-TOKEN: DEBUGTOKEN
            X-FORWARDED-HOST: local-133.umantis.lan
            
+ Response 200 (application/hal+json)

    + Headers
    
    + Body
    + Attributes (object)
        + _embedded
            + goals (array[Goal])
        + page (Page)
        + _links
            + self
                + href: /position/3/goals (string)
            + next
                + href: /position/3/goals?page=1 (string)



### Get all goals from a period [GET /position/{position_id}/period/{period_id}/goals]

All Goals from given position and period are returned through a GET request where the position id and period id are sent as an URL parameter.

+ Parameters
    + position_id (required, number, `1`) ... ID of the position of the owner of the goals in the form of an integer
    + period_id (required, number, `1`) ... ID of the period where the goals are applied, in the form of an integer

+ Request (application/json)

    + Headers
    
            Accept-Charset: application/hal+json
            X-AUTH-TOKEN: DEBUGTOKEN
            X-FORWARDED-HOST: local-133.umantis.lan
            
+ Response 200 (application/hal+json)

    + Headers
    
    + Body
    + Attributes (object)
        + _embedded
            + goals (array[Goal])
        + page (Page)
        + _links
            + self
                + href: /position/3/goals (string)
            + next
                + href: /position/3/goals?page=1 (string)



### Invite Peer to Goal [POST /positions/{position_id}/periods/{period_id}/goals/{goal_id}/invitations]

Invite a peer colleague to create a goal evaluation into the selected goal  .

+ Parameters
    + position_id (required, number, `1`) ... ID of the position who owns the goal that receives the evaluation
    + period_id (required, number, `1`) ... ID of the period in the form of a number
    + goal_id (required, string, `1-2-3`) ... ID of the goal in the form of an string

+ Request (application/json)

    + Headers
    
            Accept-Charset: application/hal+json
            X-AUTH-TOKEN: DEBUGTOKEN
            X-FORWARDED-HOST: local-133.umantis.lan
    
    + Body
    + Attributes (object)
        + person_id: 12 (number, optional)
        + email: aria.stark@starks.umantis (string, optional)

+ Response 201 (application/hal+json)
    
    + Body
    + Attributes (InvitationType)



### Get Goal Peer Invitations [GET /positions/{position_id}/goals/{goal_id}/invitations{?status}]

Returns all existing peer invitations to the selected goal

+ Parameters
    + position_id (required, number, `1`) ... ID of the position who owns the goal that receives the evaluation
    + goal_id (required, string, `1-2-3`) ... ID of the goal in the form of an string
    + status (optional, string, `started`) ... Query filter based based in the status of the invitation
        + Values
            + `started`
            + `invited`

+ Request (application/json)

    + Headers
    
            Accept-Charset: application/hal+json
            X-AUTH-TOKEN: DEBUGTOKEN
            X-FORWARDED-HOST: local-133.umantis.lan


+ Response 200 (application/hal+json)

    + Headers
    + Body
    + Attributes (object)
        + _embedded
            + invitations (array[InvitationType])
        + page (Page)
        + _links
            + self
                + href: /positions/3/goals/43/invitations (string)
            + next
                + href: /positions/3/goals/43/invitations?page=1 (string)

## Goal Type [/static_data/goals/types/{type_id}]

Every goal has a related goal type.
Every goal type has a scale of appraisal values.
Every goal type has a scale of possible categories values.

+ type_id (number) - Id of type of goal
    + objective
    + task
    + skill
    + development
    + behavior
    + feedback
    + potential
+ name: Name of the goal type (string, required)
+ appraisals (array[AppraisalValueType]): List of possibles values
+ categories (array): List of categories
    
+ Model (application/hal+json)

+ Parameters
    + type_id: objective (required, string) ... ID of the goal type in the form of a string

+ Attributes (object)
    + name: objective (string, required)
    + _embedded
        + appraisals (array[AppraisalValueType])
        + categories (array)
            + (object)
                + value: 21005 (string, required)
    + _links
        + self
            + href: /goals/types/objective (string)



### Get Goal Type [GET] 

Gets Goal Type with given url parameter id.

+ Request (application/json)

    + Headers
    
            Accept-Charset: application/hal+json
            X-AUTH-TOKEN: DEBUGTOKEN
            X-FORWARDED-HOST: local-133.umantis.lan
            
+ Response 200 (application/hal+json)
    + Body 
    + Attributes (Goal Type)




### List Goal Types [GET /static_data/goals/types]

List a list of goal types appliable to a goal.
If position or/and period parameters are sent, returned goal type are only appliable for that period and position.

    
+ Request (application/json)

    + Headers
    
            Accept-Charset: application/hal+json
            X-AUTH-TOKEN: DEBUGTOKEN
            X-FORWARDED-HOST: local-133.umantis.lan
            
+ Response 200 (application/hal+json)
    + Body  
    + Attributes (object)
        + _embedded
            + types (array[Goal Type])
        + page (Page)
    + Attributes
        + _links
            + self
                + href: /goals/types (string)




## Goal Evaluation [/positions/{position_id}/goals/{goal_id}/evaluations]

+ evaluator: Evaluator of the evaluation (string)
+ vale: Value of the evaluation (string)  
+ comment: This is the comment for a goal evaluation (string)

As links:

+ evaluator: Position Id of the creator of the Evalution (string, required)
+ period: Id of the period where the evaluation belongs (string, required)
+ goalType: Id of the related goal type (string, required)
+ goal: Goal where the evaluation is being created (string, required)


+ Model (application/json)

+ Parameters
    + position_id (required, number, `1`) ... ID of the position who owns the goal that receives the evaluation
    + goal_id (required, string, `1797-21000000000296-101`) ... ID of the goal in the form of string
    
+ Attributes (object)
    + creator_id: 123 (string, optional)
    + value: 1000954 (string, optional)  
    + comment: This is the comment for a goal evaluation (string, optional)
    + goal_id: Id of the goal where the evaluation is being created (string, required)


### Create Goal Evaluation [POST]

Creation of a Goal Evaluation using a POST request.

+ Request (application/json)

    + Headers
    
            Accept-Charset: application/hal+json
            X-AUTH-TOKEN: DEBUGTOKEN
            X-FORWARDED-HOST: local-133.umantis.lan
    
    + Body
    + Attributes (Goal Evaluation)

+ Response 201 (application/hal+json)
    + Attributes
        + id: 1-2-3-4-2 (string, required)
    + Attributes (Goal Evaluation)
    + Attributes
        + _links
            + period
                + href: /periods/3
            + evaluator
                + href: /positions/54
            + goal_type
                + href: /goals/types/3
            + self
                + href: /positions/1/goals/1797-21000000000296-101/evaluations/1-2-3-4-2 (string)
            + update
                + href: /positions/1/goals/1797-21000000000296-101/evaluations/1-2-3-4-2 (string)
            + delete
                + href: /positions/1/goals/1797-21000000000296-101/evaluations/1-2-3-4-2 (string)
            + goal
                + href: /positions/1/goals/1797-21000000000296-101 (string)


### Get Goal Evaluation [GET /positions/{position_id}/goals/{goal_id}/evaluations/{evaluation_id}]

Gets evaluation with given url id's.

+ Parameters
    + position_id (required, number, `1`) ... ID of the position who owns the goal that receives the evaluation
    + goal_id (required, string, `1-2-3-4`) ... ID of the goal in the form of a string
    + evaluation_id (required, string, `1-2-3-4-2`) ... ID of the goal evaluation in the form of an string
    
+ Request (application/json)

    + Headers
    
            Accept-Charset: application/hal+json
            X-AUTH-TOKEN: DEBUGTOKEN
            X-FORWARDED-HOST: local-133.umantis.lan
    
    + Body

+ Response 200 (application/hal+json)
    + Attributes
        + id: 1-2-3-4-2 (string, required)
    + Attributes (Goal Evaluation)
    + Attributes
        + _links
            + period
                + href: /periods/3
            + evaluator
                + href: /positions/54
            + goal_type
                + href: /goals/types/3
            + self
                + href: /positions/1/goals/1-2-3-4/evaluations/1-2-3-4-2 (string)
            + update
                + href: /positions/1/goals/1-2-3-4/evaluations/1-2-3-4-2 (string)
            + delete
                + href: /positions/1/goals/1-2-3-4/evaluations/1-2-3-4-2 (string)



### Udate Goal Evaluation [PUT /positions/{position_id}/goals/{goal_id}/evaluations/{evaluation_id}]

This PUT request will modify the existing Goal Evaluation with given url parameter ids.

+ Parameters
    + position_id (required, number, `1`) ... ID of the position who owns the goal that receives the evaluation
    + goal_id (required, string, `1-2-3-4`) ... ID of the goal in the form of an string
    + evaluation_id (required, string, `1-2-3-4-2`) ... ID of the goal evaluation in the form of an string
    
+ Request (application/json)

    + Headers
    
            Accept-Charset: application/hal+json
            X-AUTH-TOKEN: DEBUGTOKEN
            X-FORWARDED-HOST: local-133.umantis.lan
    
    + Body

+ Response 200 (application/hal+json)
    + Attributes
        + id: 1-2-3-4-2 (string, required)
    + Attributes (Goal Evaluation)
    + Attributes
        + _links
            + period
                + href:/periods/3
            + evaluator
                + href: /positions/54
            + goal_type
                + href:  /goals/types/3
            + self
                + href:  /positions/1/goals/1-2-3-4/evaluations/1-2-3-4-2 (string)
            + update
                + href:  /positions/1/goals/1-2-3-4/evaluations/1-2-3-4-2 (string
            + delete
                + href:  /positions/1/goals/1-2-3-4/evaluations/1-2-3-4-2 (string)


### Delete a Goal Evaluation [DELETE /positions/{position_id}/goals/{goal_id}/evaluations/{evaluation_id}]

This DELETE request will delete the Goal Evaluation with the existing request id parameters.

+ Parameters
    + position_id (required, number, `1`) ... ID of the position who owns the goal that receives the evaluation
    + goal_id (required, string, `1-2-3-4`) ... ID of the goal in the form of an string
    + evaluation_id (required, number, `1-2-3-4-2`) ... ID of the goal evaluation in the form of an string

+ Request (application/json)
            
    + Headers
    
            Accept-Charset: application/hal+json
            X-AUTH-TOKEN: DEBUGTOKEN
            X-FORWARDED-HOST: local-133.umantis.lan
   
+ Response 204




## Periods Collection [/periods]

Periods define timeline stages in any corporative element.

### Period [/periods/{id}]

+ id: Id of the period in the numeric format (number, required)
+ name: Name of the period(string, required)
+ order: Sequence order of the period  (number, required)
+ closedForEmployeeReview: Flag that allows employee to interact with the goals included in the period.  (boolean, required)
+ closedForEvaluation: Flag that forbids further evaluations in the period. (boolean, required)

+ Parameters
    + id (required, number, `1`) ... ID of the period in the form of an integer

+ Model (application/hal+json)

+ Attributes (object)
    + id: 12 (number, required)
    + name: Q3-2015 (string, required)
    + order: 5  (number, required)
    + closed_for_employee_review: true (boolean, required)
    + closed_for_evaluation: false (boolean, required)
    + _links
        + self
            + href: /periods/12 (string)



### Get period [GET]

Gets period identified by url id parameter.

+ Request (application/json)

    + Headers
    
            Accept-Charset: application/hal+json
            X-AUTH-TOKEN: DEBUGTOKEN
            X-FORWARDED-HOST: local-133.umantis.lan
            
+ Response 200 (application/hal+json)
    + Body  
    + Attributes (Period)
        


### Get current period [GET /periods/current]

Gets the period that is currently applied.

+ Request (application/json)

    + Headers
    
            Accept-Charset: application/hal+json
            X-AUTH-TOKEN: DEBUGTOKEN
            X-FORWARDED-HOST: local-133.umantis.lan
            
+ Response 200 (application/hal+json)
    + Body  
    + Attributes (Period)
    + Attributes
        + _embedded
            + next (Period)


### Get all periods [GET /periods]

Gets the period that is currently applied.

+ Request (application/json)

    + Headers
    
            Accept-Charset: application/hal+json
            X-AUTH-TOKEN: DEBUGTOKEN
            X-FORWARDED-HOST: local-133.umantis.lan
            
+ Response 200 (application/hal+json)
    + Body  
    + Attributes (object)
        + _embedded
            + periods (array[Period])
        + page (Page)
    + Attributes
        + _links
            + self
                + href: /periods (string)
            + next
                + href: /periods?page=1 (string)



## Overall Evaluations [/positions/{position_id}/periods/{period_id}/evaluations/{evaluation_id}]

+ Model (application/hal+json)

+ Parameters
    + position_id (required, number, `1`) ... ID of the position who owns the goal that receives the evaluation
    + period_id (required, number, `1`) ... ID of the period in the form of an integer
    + evaluation_id (required, string, `2-1-21000000000049-336`) ... ID of the evaluation in the form of an string
    
+ Attributes (object)


### Get Single Overall Evaluation [GET /positions/{position_id}/periods/{period_id}/evaluations/{evaluation_id}]

Gets period evaluation pertaining to given position and period.

+ Request (application/json)

    + Headers
    
            Accept-Charset: application/hal+json
            X-AUTH-TOKEN: DEBUGTOKEN
            X-FORWARDED-HOST: local-133.umantis.lan
    
    + Body

+ Response 200 (application/hal+json)
    + Attributes (OverallEvaluationType)
    + Attributes
        + _links
            + self
                + href: /positions/1/periods/1/evaluations (string)
            + period
                + href: /periods/1 (string)
            + position
                + href: /positions/1 (string)

### Get Overall Evaluations For Period [GET /positions/{position_id}/periods/{period_id}/evaluations]

Returns all period evaluations pertaining to a given position (historical overview) in reverse historical order

+ Request (application/json)

    + Headers
    
            Accept-Charset: application/hal+json
            X-AUTH-TOKEN: DEBUGTOKEN
            X-FORWARDED-HOST: local-133.umantis.lan
    
    + Body

+ Response 200 (application/hal+json)
    + Attributes (PeriodEvaluationType)
    + Attributes
        + _links
            + self
                + href: /positions/1/periods/1/evaluations/ (string)
            + period
                + href: /periods/1 (string)
            + position
                + href: /positions/1 (string)


### Get Overall Evaluations List [GET /positions/{position_id}/evaluations]

Returns all period evaluations pertaining to a given position (historical overview) in reverse historical order

+ Request (application/json)

    + Headers
    
            Accept-Charset: application/hal+json
            X-AUTH-TOKEN: DEBUGTOKEN
            X-FORWARDED-HOST: local-133.umantis.lan
    
    + Body

+ Response 200 (application/hal+json)
    + Attributes (Page)
    + Attributes
        + _links
            + self
                + href: /positions/1/evaluations (string)
        + _embedded
            + evaluations (array[PeriodEvaluationType])


### Get Period Evaluation Appraisals [GET /static_data/periods/appraisals]

Every overall evaluation has a scale of appraisal values.
List all appraisals for a given goal type.

+ Request (application/json)

    + Headers
    
            Accept-Charset: application/hal+json
            X-AUTH-TOKEN: DEBUGTOKEN
            X-FORWARDED-HOST: local-133.umantis.lan
            
+ Response 200 (application/hal+json)
    + Body  
    + Attributes
        + appraisals (array[AppraisalValueType])
        + _links
            + self
                + href: /periods/appraisals (string)





### Overall Evaluation Status [/positions/{position_id}/periods/{period_id}/status]

Status of the Period Evaluation

+ status (enum)
    + EMPTY
    + OPEN
    + GOALS_AGREED
    + GOALS_CONFIRMED
    + EVALUATION_AGREED
    + EVALUATION_CONFIRMED
<!-- + last modified: Date of last time it was modified -->
As links:
+ last modifier: Position who triggered last status action

+ Model (application/hal+json)

+ Parameters
    + position_id (required, number, `1`) ... ID of the position who owns the goal that receives the evaluation
    + period_id (required, number, `1`) ... ID of the period in the form of an integer
    
+ Attributes (object)
    + status (enum)
        + EMPTY
        + OPEN
        + GOALS_AGREED
        + GOALS_CONFIRMED
        + EVALUATION_AGREED
        + EVALUATION_CONFIRMED
    

### Get Overall Evaluation Status [GET]

Every period has a status.
Returns the status for a given period.

+ Request (application/json)

    + Headers
    
            Accept-Charset: application/hal+json
            X-AUTH-TOKEN: DEBUGTOKEN
            X-FORWARDED-HOST: local-133.umantis.lan
            
+ Response 200 (application/hal+json)
    + Body  
    + Attributes (Overall Evaluation Status)
    + Attributes
        + _links
            + self
                + href: /positions/1/periods/1/status (string)
            + update
                + href:  /positions/1/periods/1/status (string)


### Get current Overall Evaluation Status [GET /positions/{position_id}/periods/current/status]

Returns status from current period.

Possible status are:
+ EMPTY: This period hasn't still been initialized, so it doesn't has any content.
+ OPEN: Period Evaluation state after it has been initialized. It may contain contents/goals.
+ GOALS_AGREED: All goals included in this period are agreed.
+ GOALS_CONFIRMED: All goals included in this period are confirmed. If a goal is added or deleted, the status changes automatically.
+ EVALUATION_AGREED: Period Evaluation status is on agreement.
+ EVALUATION_CONFIRMED: Period Evaluation status is confirmed.

+ Request (application/json)

    + Headers
    
            Accept-Charset: application/hal+json
            X-AUTH-TOKEN: DEBUGTOKEN
            X-FORWARDED-HOST: local-133.umantis.lan
            
+ Response 200 (application/hal+json)
    + Body  
    + Attributes (Overall Evaluation Status)
    + Attributes
        + _links
            + self
                + href: /positions/1/periods/1/status (string)
            + update
                + href:  /positions/1/periods/1/status (string)



### Apply Overall Evaluation Status Action [POST /positions/{position_id}/periods/{period_id}/actions]

This PUT request will aplly a period status action to the period.
Retrieve it's possible values on [Get Period Evaluation Actions] .

+ Request (application/json)

    + Headers
    
            Accept-Charset: application/hal+json
            X-AUTH-TOKEN: DEBUGTOKEN
            X-FORWARDED-HOST: local-133.umantis.lan
    
    + Body
    + Attributes (Overall Evaluation Action)
+ Response 200 (application/hal+json)
    + Attributes (Overall Evaluation Status)
    + Attributes
        + _links
            + self
                + href: /positions/1/periods/1/status (string)
            + update
                + href: /positions/1/periods/1/status (string)


### Get Overall Evaluation Actions [GET /static_data/periods/actions]

At every period evaluation, a list of actions can be applied in order to change it's status, as well as triggers some required actions.
List all actions that can be applied to a Period Evaluation in order to change it status.

Possible actions are:
+ AGREE_GOALS: Agreement for all goals included in the Period Evaluation.
+ CONFIRM_GOALS: Confirmation for all goals included in the Period Evaluation.
+ REOPEN_GOALS: All goals included in the Period Evaluation are reopened.
+ AGREE_EVALUATION: Agreement for current Period Evaluation.
+ CONFIRM_EVALUATION: Confirmation for current Period Evaluation.
+ REOPEN_EVALUATION: Current Period Evaluation gets reopened.


+ Request (application/json)

    + Headers
    
            Accept-Charset: application/hal+json
            X-AUTH-TOKEN: DEBUGTOKEN
            X-FORWARDED-HOST: local-133.umantis.lan
            
+ Response 200 (application/hal+json)
    + Body
    + Attributes
        + _embedded
            + actions (array[Overall Evaluation Action])


# Data Structures

## Overall Evaluation Action
+ action: AGREE_GOALS (string, required)

## GoalType
+ id: 0-0-0-0 (string)
+ title: Title (string, required)        
+ weight: 5 (number, optional)
+ duedate: `2015-05-05T12:30:00` (optional, string)
+ description: Description (string, required)
+ private: true (boolean)
+ creationdate: `2015-05-05T12:30:00` (optional, string)
+ modificationdate: `2015-05-05T12:30:00` (optional, string)
+ criteria: comment (string)
+ measures: comment (string)
+ _embedded
    + goal_type (Goal Type)
+ _links
    + creator
        + href: /positions/1
    + modifier
        + href: /positions/1
    + recipient
        + href: /positions/1
    + period
        + href: /periods/1
+ page (Page)

## PeriodEvaluationType
+ status: Status of the evaluation for the position for a given period
+ period_id: 1 (number, required)
+ position_id: 1 (number, required)
+ _embedded
    + overall_evaluations (array[OverallEvaluationType])

## OverallEvaluationType
+ id: 1 (string, required)
+ score_value: 0.8 (number, required)
+ comment: overall evaluation Comment (string, required)
+ answer: customer defined dynamic list value (string, required)
+ evaluator_type (EvaluatorType)

## GoalEvaluationType
+ id: 1 (string, required)
+ score_value: 0.8 (number, required)
+ comment: evaluation comment (string)
+ evaluation_type (enum)
    + OBJECTIVE
    + TASK
    + SKILL
    + DEVELOPMENT
    + BEHAVIOR
    + FEEDBACK
    + COMPANY_GOAL
    + DEPARTMENT_GOAL
+ answer: customer defined dynamic list value (string, required)
+ _links
    + goal
        + href: /goals/1

## MainGoalEvaluationType
+ evaluator_type (EvaluatorType)
+ _embedded
    + goalEvaluation (GoalEvaluationType)

## EvaluatorType (enum)
    + MANAGER
    + EMPLOYEE

## AppraisalType
+ evaluator_email
I actually have doubts about the Evaluator shall it be a link?
Problems: if external person, the email is enough
but if employee, who's details are not accessible to the current user then a link won't work...
+ creation_date: `2015-05-05T12:30:00` (optional, string)
+ modification_date: `2015-05-05T12:30:00` (optional, string)
+ _embedded
    + goalEvaluation (GoalEvaluationType)
+ _links
    + evaluator
        + href: /persons/1

## AppraisalValueType
+ value: 1000954 (string, required)
+ list: 68 (string, required)

## Page
+ offset: 0 (number, required)        
+ limit: 10 (number, required)

## CategoryType
+ value: 21005 (string, required)
+ list: 1010 (string, required)

## InvitationType
+ status (required, enum)
    + INVITED
    + STARTED
+ creation_date: `2015-05-05T12:30:00` (optional, string)
+ modification_date: `2015-05-05T12:30:00` (optional, string)
+ _links
    + peer_evaluation
        + href: /positions/230/goals/434/evaluations
    + peer_person 
        + href: /persons/32
    + goal_recipient
        + href: /positions/34
    + goal
        + href: /positions/34/periods/42/goals/78